import barrileteCosmico.*
import viaje.*
import localidades.*
import mediosDeTransporte.*
import usuarios.*


describe "Tests" {

var turbina = new Turbina(nivelImpulso = 500)
var turbinaDoble = new Turbina(nivelImpulso = 1000)

var avion = new Avion(turbinas = [turbina, turbinaDoble],velocidad = 100)
var barco = new Barco(probabilidadChoque = 0.8, velocidad = 70)
var tren = new Tren(velocidad = 60)
var micro = new Micro(velocidad = 30)
var medios = [avion,tren,micro,barco]

var playa = new Playa()
var montania = new Montania(altura = 1000)
var montaniaAlta = new Montania(altura = 6000)
var ciudadHistorica = new CiudadHistorica(cantidadMuseos = 5)

var garlicSea = new Localidad(equipaje = #{"Caña de Pescar", "Piloto"}, precio = 2500, ubicacion = 50,tipoLocalidad = playa)
var silverSea = new Localidad(equipaje = #{"Protector Solar","Equipo de Buceo","Seguro asistencia al viajero"}, precio = 1350, ubicacion = 100,tipoLocalidad = ciudadHistorica)
var lastToninas = new Localidad(equipaje = #{"Vacuna Gripal", "Vacuna B", "Necronomicon"}, precio = 3500, ubicacion = 200,tipoLocalidad = montania)
var goodAirs = new Localidad(equipaje = #{"Cerveza", "Protector Solar"}, precio = 1500, ubicacion = 300, tipoLocalidad = montaniaAlta)

var pHari = new UsuarioEmpresarial(viajes = #{},seguidores = #{}, kilometrosAcumulados = 0, presupuesto =  1000000, localidadOrigen = silverSea)
var juan = new UsuarioEmpresarial(viajes = #{},seguidores = #{}, kilometrosAcumulados = 0,presupuesto = 500000,localidadOrigen = silverSea)
var ariel = new UsuarioEstudiantil(viajes = #{},seguidores = #{}, kilometrosAcumulados = 0, presupuesto = 1000, localidadOrigen = garlicSea)
var familiaPerez = new GrupoFamiliar(viajes = #{},seguidores = #{}, kilometrosAcumulados = 0, presupuesto = 1600, localidadOrigen = lastToninas)

fixture {
	barrileteCosmico.destinos(#{garlicSea,silverSea,lastToninas,goodAirs})
	barrileteCosmico.mediosDeTransporte(#{avion,barco,tren,micro})
}

test "El destino importante de barilete cosmico es last toninas" 
{
	assert.equals(#{lastToninas} , barrileteCosmico.destinosImportantes())
}
test "despues de aplicar un descuento de 25%, las toninas tiene un precio de 2625" {
	lastToninas.aplicarDescuento(25)
	assert.equals(2625 , lastToninas.precio())
}
test "despues de aplicar un descuento de 25%, las toninas tiene un certificado de descuento" {
	lastToninas.aplicarDescuento(25)
	assert.that((lastToninas.equipaje()).contains("Certificado de descuento"))
}
test "silver sea NO es un destino peligroso" {
	assert.notThat(silverSea.esPeligroso())
}
test " se aplica un descuento de 15% a todos los destinos y su valor es, Garlic´s sea: $2125, Silver's Sea: $1147.5,
 Last Toninas: $2975, Good Airs: $1275 y todos deben poseer el certificado de descuento.
"{
	barrileteCosmico.aplicarDescuento(15, garlicSea)
	barrileteCosmico.aplicarDescuento(15, silverSea)
	barrileteCosmico.aplicarDescuento(15, lastToninas)
	barrileteCosmico.aplicarDescuento(15, goodAirs)
	
	assert.equals(2125 , garlicSea.precio())
	assert.equals(1147.5 , silverSea.precio())
	assert.equals(2975 , lastToninas.precio())
	assert.equals(1275 , goodAirs.precio())
	assert.that((garlicSea.equipaje()).contains("Certificado de descuento"))
	assert.that((silverSea.equipaje()).contains("Certificado de descuento"))
	assert.that((lastToninas.equipaje()).contains("Certificado de descuento"))
	assert.that((goodAirs.equipaje()).contains("Certificado de descuento"))

}
test "goodAirs es el unico destino peligroso" 
{
	assert.equals(#{goodAirs} , barrileteCosmico.destinosPeligrosos())	
}
test " barrileteCosmico es una empresa extrema"
{
	assert.that(barrileteCosmico.empresaExtrema())
}
test "los destinos de barrilete cosmico son garlicSea, silverSea, lastToninas, goodAirs."
{
	assert.equals(#{garlicSea, silverSea, lastToninas, goodAirs}, barrileteCosmico.destinos())
}
test "pablo hari no tiene kilometros acumulados inicialmente"
{
	assert.equals(0, pHari.kilometrosAcumulados())
}
test "Barrilete Cosmico le arma un viaje a pablo hari y tiene kilometros acumulados"
{
	barrileteCosmico.armarViaje(pHari,lastToninas)	
	assert.that(pHari.kilometrosAcumulados()>0)
}
test "Barrilete Cosmico le arma un viaje a pablo hari a garlicSea y su localidad origen cambia a galicSea"
{
	barrileteCosmico.armarViaje(pHari, garlicSea)
	assert.equals(pHari.localidadOrigen(), garlicSea)
}
test "Barrilete Cosmico le arma un viaje a pablo hari y su presupuesto cambia"
{
	var presupuestoAntesDeViaje = pHari.presupuesto()
	barrileteCosmico.armarViaje(pHari,silverSea)	
	assert.notEquals(pHari.presupuesto(), presupuestoAntesDeViaje)
}
test "pablo agrega a juan y se siguen mutuamente"
{
	pHari.seguirUsuario(juan)
	assert.that(pHari.sigueA(juan))
	assert.that(juan.sigueA(pHari))
}
test "Si barrilete cosmico le arma un viaje a pablo hari a last toninas con escala en silver sea,
 y el esta en garlic sea, recorre 150km y su nueva localidad de origen es garlic sea"
{
	pHari.localidadOrigen(garlicSea)
	barrileteCosmico.armarViaje(pHari,silverSea)
	barrileteCosmico.armarViaje(pHari,lastToninas)	
	assert.equals(150, pHari.kilometrosAcumulados())	
}
test "Si se viaja desde last toninas a garlic sea se recorren 150 km"
{
	assert.equals(150, lastToninas.distanciaA(garlicSea))
}
test "Viajar en avion desde silver sea hacia last toninas cuesta 153500 pesos"
{
	var viaje = new Viaje(medioUsado = avion, origen = silverSea, destino = lastToninas)
	
	assert.equals(153500, viaje.costo())
}
test "Ariel elige el barco como medio de transporte"
{
	assert.equals(barco,ariel.elegirMedio(medios))
}
test "silverSea NO es una ciudad destacada"
{
	assert.notThat(silverSea.esImportante())
}
}